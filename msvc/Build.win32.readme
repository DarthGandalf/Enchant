How to build enchant for windows
================================

As an MSVC-only alternative, you can try https://github.com/ermshiperete/Enchant/blob/FieldWorks/msvc/Build.win32.readme

These instructions are for win64. If you want x86 instead, something similar can be used too. Use common sense.

Enchant depends on GLib. The link above suggests that GLib and Enchant should be built using the same msvcrt.dll, but
prebuilt binaries from http://www.gtk.org/download/win64.php worked fine for me.
Below there is a list of which exact versions I've used.

I used mingw64 to cross-compile Enchant to windows. Mingw64 itself was running in Cygwin.
Patches in FieldWorks branch which should fix compilation on MSVC, were not needed for mingw64.

We'll need to download from http://www.gtk.org/download/win64.php
* GLib (Binaries and Dev)
* libiconv (Runtime only)
* gettext-runtime (Runtime and Dev)

Enchant searches GLib using pkg-config, but .pc which is included into GLib-dev package, refers to some special prefix.
To workaround this, we'll make a wrapper for pkg-config.

Put these 2 lines to /tmp/pkg-cfg-wrapper.sh

#!/bin/bash
env PKG_CONFIG_PATH=/cygdrive/c/Users/q/Downloads/glib-dev_2.34.3-1_win64/lib/pkgconfig pkg-config --define-variable=prefix=/cygdrive/c/Users/q/Downloads/glib-dev_2.34.3-1_win64 "$@"

Don't forget to chmod +x /tmp/pkg-cfg-wrapper.sh

In a fresh checkout of Enchant:
First, need to modify src/Makefile.am: remove -DENCHANT_GLOBAL_MODULE_DIR from it. Otherwise, Enchant will look at several hard-coded places for its backends (e.g. myspell), but not near itself.
Then:
./autogen.sh --no-configure
mkdir build
cd build
../configure --host=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 --prefix=/tmp/enchant-root PKG_CONFIG=/tmp/pkg-cfg-wrapper.sh LDFLAGS=-L/cygdrive/c/Users/q/Downloads/gettext-dev_0.18.2.1-1_win64/lib
make
make install

Enchant is compiled. Need to make it usable from MSVC.
To do that, need libenchant.def. I've put one here, but if you want to generate it yourself, you can either do it by hand,
or use the following option to gcc while linking libenchant.dll: -Wl,--output-def,libenchant.def
When you have libenchant.def, open Developer Command Prompt for VS2013, navigate to the directory, and run:
lib /machine:x64 /def:libenchant.def
Now we have libenchant.lib.

There is one more complication regarding GLib:
If to use the provided headers as is, MSVC refuses to compile due to some errors.
If to compile GLib using MSVC, there probably won't be need for such hacks, but we downloaded the prebuilt version, remember?
Copy glib-dev_2.34.3-1_win64/lib/glib-2.0/include/glibconfig.h to some other place.
We'll need to make 2 modifications for it:
1. Right after "#define __GLIBCONFIG_H__" add two more lines:
#include <BaseTsd.h>
typedef SSIZE_T ssize_t;
2. Find a block with "#define G_CAN_INLINE". After that block add this line:
#undef G_CAN_INLINE

Now Enchant is usable with MSVC:
Add directories with enchant headers, glib-2.0 headers, and our modified glibconfig.h to Include directories in MSVC.
Add libenchant.lib to additional libraries.

TODO: find an easy way to point cmake at enchant using pkg-config when building for MSVC.

Runtime dependencies
--------------------
Program which was built using libenchant.lib needs these files in PATH. E.g. you can put them right near .exe
* libenchant.dll - copy it from /tmp/enchant-root/bin
* libglib-2.0-0.dll - was downloaded
* libgmodule-2.0-0.dll - was downloaded in GLib
* libiconv-2.dll - was downloaded
* libintl-8.dll - was downloaded in gettext-runtime

Myspell backend was already built during "make". It's in /tmp/enchant-root/lib/enchant/libenchant_myspell.dll
It needs to be in relative path from .exe, in lib/enchant/
Dictionaries for myspell can be put to share/myspell/dicts/
enchant.ordering can be copied from /tmp/enchant-root/share/enchant to share/enchant/
If your .exe lives in some bin/, put lib/ and share/ near that bin/ instead.
Note that libenchant_myspell.dll requires also several more files in PATH:
* libstdc++-6.dll
* libgcc_s_seh-1.dll
They are in /usr/x86_64-w64-mingw32/sys-root/mingw/bin
Warning: before distributing the binaries, check licenses of mingw64 runtime.

TODO: build other backends, e.g. aspell


Versions I used
---------------

For reference, these worked for me:
I used:
Windows 7 x64
Visual Studio 2013 Community
GLib 2.34.3
libicinv 1.13.1
gettext-runtime 0.18.2.1

Cygwin 64 environment:
mingw64-x86_64-gcc-g++ 4.8.3-1
pkg-config 0.28-1
make 4.0-2
automake
autoconf
git

