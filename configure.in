AC_INIT(src/enchant.h)

dnl Set release number
dnl This is derived from "Versioning" chapter of info libtool documentation.
PACKAGE=enchant
dnl     4a) Increment when removing or changing interfaces.
ENCHANT_MAJOR_VERSION=1
dnl     4a) 5) Increment when adding interfaces.
dnl     6) Set to zero when removing or changing interfaces.
ENCHANT_MINOR_VERSION=2
dnl     3) Increment when interfaces not changed at all,
dnl               only bug fixes or internal changes made.
dnl     4b) Set to zero when adding, removing or changing interfaces.
ENCHANT_MICRO_VERSION=3
dnl
dnl     Set this too
MAJOR_VERSION_PLUS_MINOR_VERSION=`expr $ENCHANT_MAJOR_VERSION + $ENCHANT_MINOR_VERSION`
dnl
VERSION=$ENCHANT_MAJOR_VERSION.$ENCHANT_MINOR_VERSION.$ENCHANT_MICRO_VERSION
dnl Version info for libraries = CURRENT:REVISION:AGE
VERSION_INFO=$MAJOR_VERSION_PLUS_MINOR_VERSION:$ENCHANT_MICRO_VERSION:$ENCHANT_MINOR_VERSION
AC_SUBST(VERSION_INFO)
AC_SUBST(ENCHANT_MAJOR_VERSION)
AC_SUBST(ENCHANT_MINOR_VERSION)
AC_SUBST(ENCHANT_MICRO_VERSION)

AM_INIT_AUTOMAKE($PACKAGE, $VERSION)
AM_MAINTAINER_MODE

dnl Checks for programs.
AC_ISC_POSIX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_STDC_HEADERS
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL

AC_C_CONST

AC_CHECK_FUNCS(flock lockf)

have_cxx=yes
AC_PROG_CXX(,have_cxx=no)
AM_CONDITIONAL(WITH_CXX, test "x$have_cxx" = "xyes")

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)

PKG_CHECK_MODULES(ENCHANT, [glib-2.0 gmodule-2.0])

AC_SUBST(ENCHANT_CFLAGS)
AC_SUBST(ENCHANT_LIBS)

AC_MSG_CHECKING([for native Win32])
case "$host" in
  *-*-mingw*)
    native_win32=yes
    ;;
  *)
    native_win32=no
    ;;
esac
AC_MSG_RESULT([$native_win32])
AM_CONDITIONAL(OS_WIN32, test "x$native_win32" = "xyes")

dnl ===========================================================================

m4_copy([AC_DEFUN],[glib_DEFUN])
glib_DEFUN([GLIB_LC_MESSAGES],
  [AC_CHECK_HEADERS([locale.h])
    if test $ac_cv_header_locale_h = yes; then
    AC_CACHE_CHECK([for LC_MESSAGES], am_cv_val_LC_MESSAGES,
      [AC_TRY_LINK([#include <locale.h>], [return LC_MESSAGES],
       am_cv_val_LC_MESSAGES=yes, am_cv_val_LC_MESSAGES=no)])
    if test $am_cv_val_LC_MESSAGES = yes; then
      AC_DEFINE(HAVE_LC_MESSAGES, 1,
        [Define if your <locale.h> file defines LC_MESSAGES.])
    fi
  fi])

GLIB_LC_MESSAGES

dnl ===========================================================================

dnl binreloc
AM_BINRELOC
AM_CONDITIONAL(WITH_BINRELOC, test "x$br_cv_binreloc" = "xyes")

build_ispell=yes

AC_ARG_ENABLE(ispell, [  --disable-ispell     enable the ispell backend [default=auto]], build_ispell="$enableval", build_ispell=yes)

if test "x$have_cxx" = "xno"; then
   build_ispell=no
fi
AM_CONDITIONAL(WITH_ISPELL, test "x$build_ispell" = "xyes")

ispell_dir=${datadir}/enchant/ispell
AC_ARG_WITH(ispell-dir, [  --with-ispell-dir=PATH    path to installed ispell dicts ])

if test "x$with_ispell_dir" != "x" ; then
   ispell_dir=$with_ispell_dir
fi

ISPELL_CFLAGS="-DENCHANT_ISPELL_DICT_DIR='\"$ispell_dir\"'"
AC_SUBST(ISPELL_CFLAGS)

build_myspell=yes

AC_ARG_ENABLE(myspell, [  --disable-myspell     enable the myspell backend [default=auto]], build_myspell="$enableval", build_myspell=yes)

if test "x$have_cxx" = "xno"; then
   build_myspell=no
fi
AM_CONDITIONAL(WITH_MYSPELL, test "x$build_myspell" = "xyes")

myspell_dir=${datadir}/enchant/myspell
AC_ARG_WITH(myspell-dir, [  --with-myspell-dir=PATH    path to installed myspell dicts ])

if test "x$with_myspell_dir" != "x" ; then
   myspell_dir=$with_myspell_dir
fi

MYSPELL_CFLAGS="$MYSPELL_CFLAGS -DENCHANT_MYSPELL_DICT_DIR='\"$myspell_dir\"'"
if test "x$with_system_myspell" != "xno"; then
   MYSPELL_CFLAGS="$MYSPELL_CFLAGS -DWITH_SYSTEM_MYSPELL=1"
fi

AC_SUBST(MYSPELL_CFLAGS)
AC_SUBST(MYSPELL_LIBS)

check_aspell=yes
build_aspell=no

AC_ARG_ENABLE(aspell, [  --disable-aspell     enable the aspell backend [default=auto]], check_aspell="$enableval", check_aspell=yes)

AC_ARG_WITH(aspell-prefix, [  --with-aspell-prefix=DIR
                          specify under which prefix aspell is installed.], with_aspell_prefix="$withval", )

if test "x$check_aspell" != "xno"; then
   saved_LDFLAGS=$LDFLAGS

   ASPELL_CFLAGS=
   if test "x$with_aspell_prefix" != "x"; then       
       LDFLAGS="-L$with_aspell_prefix/lib "$LDFLAGS
       ASPELL_INC="-I$with_aspell_prefix/include"
       ASPELL_LIBS="-L$with_aspell_prefix/lib -laspell"
   else
       aspell_prefix=${prefix}
       if test "x$prefix" = "xNONE"; then
	  aspell_prefix="/usr/local"
       fi

       AC_CHECK_PROG(HAVE_ASPELL, aspell, yes, no)
       if test "x$HAVE_ASPELL" = "xyes"; then
	  AC_MSG_CHECKING([For Aspell >= 0.50.0])
	  aspell_major=`aspell -v | awk -F. '{print $4;}' | awk -F")" '{print $1;}'`
	  if test "$aspell_major" -ge "50"; then
              LDFLAGS="-L`aspell config prefix`/lib "$LDFLAGS
	      ASPELL_INC="-I`aspell config prefix`/include"
	      ASPELL_LIBS="-L`aspell config prefix`/lib -laspell"
	      AC_MSG_RESULT([yes])
	  else
	      AC_MSG_RESULT([unknown])
	  fi
      fi

      if test "x$HAVE_ASPELL" != "xyes"; then
	      AC_MSG_WARN([Didn't find aspell >= 0.50.0 and no explicit path aspell specified. Guessing at $aspell_prefix])
	      ASPELL_LIBS="-L$aspell_prefix/lib -laspell"
      fi
   fi

   AC_MSG_CHECKING([For aspell headers in $aspell_prefix/include])
   if test -f "$aspell_prefix/include/pspell/pspell.h"; then
       AC_MSG_RESULT([yes])

       AC_CHECK_LIB(aspell,new_aspell_config,build_aspell=yes,
          [AC_CHECK_LIB(pspell, new_pspell_config, build_aspell=yes, AC_MSG_WARN([Enchant building without the aspell library]))]
         ,)
       AC_CHECK_LIB(aspell,get_aspell_dict_info_list,ASPELL_CFLAGS="-DASPELL_0_50_0=1",)
   else
       AC_MSG_RESULT([no])
       if test "x$HAVE_ASPELL" = "xyes"; then
           AC_MSG_WARN([Didn't find pspell (aspell) headers])
       fi
   fi
   LDFLAGS=$saved_LDFLAGS
   
   AC_SUBST(ASPELL_INC)
   AC_SUBST(ASPELL_LIBS)
   AC_SUBST(ASPELL_CFLAGS)
fi

AM_CONDITIONAL(WITH_ASPELL, test "$build_aspell" = yes)

build_uspell=no

check_uspell=yes
AC_ARG_ENABLE(uspell, [  --disable-uspell     enable the uspell backend [default=auto]], check_uspell="$enableval", check_uspell=yes)

if test "x$have_cxx" = "xno"; then
   check_uspell=no
fi

if test "x$check_uspell" != "xno"; then
   PKG_CHECK_MODULES(USPELL, [libuspell >= 1.1.0], build_uspell=yes, build_uspell=no)
fi

uspell_dir=${datadir}/enchant/uspell
AC_ARG_WITH(uspell-dir, [  --with-uspell-dir=PATH    path to installed uspell dicts ])

if test "x$with_uspell_dir" != "x" ; then
   uspell_dir=$with_uspell_dir
fi

USPELL_CFLAGS="$USPELL_CFLAGS -DENCHANT_USPELL_DICT_DIR='\"$uspell_dict_dir\"'"
AC_SUBST(USPELL_CFLAGS)
AC_SUBST(USPELL_LIBS)

AM_CONDITIONAL(WITH_USPELL, test "$build_uspell" = yes)

build_hspell=no
check_hspell=yes
AC_ARG_ENABLE(hspell, [  --disable-hspell     enable the hspell backend [default=auto]], check_hspell="$enableval", check_hspell=yes)

AC_ARG_WITH(hspell-prefix, [  --with-hspell-prefix=DIR
                          specify under which prefix hspell is installed.], with_hspell_prefix="$withval", )

dnl change to pkg-config when hspell provides a hspell.pc file

if test "x$check_hspell" != "xno"; then
   saved_LDFLAGS=$LDFLAGS

   HSPELL_CFLAGS=
   HSPELL_LIBS=" -lhspell -lz"

   if test "x$with_hspell_prefix" != "x"; then       
       LDFLAGS="-L$with_hspell_prefix/lib "$LDFLAGS
       HSPELL_CFLAGS="-I$with_hspell_prefix/include"
       HSPELL_LIBS="-L$with_hspell_prefix/lib "$HSPELL_LIBS
   fi

   AC_CHECK_LIB(hspell, hspell_get_dictionary_path, build_hspell=yes, build_hspell=no, -lz)
   LDFLAGS=$saved_LDFLAGS

   AC_SUBST(HSPELL_CFLAGS)
   AC_SUBST(HSPELL_LIBS)
fi

AM_CONDITIONAL(WITH_HSPELL, test "$build_hspell" = yes)

dnl =======================================================================================

AC_OUTPUT([
Makefile
enchant.pc
enchant.spec
src/Makefile
src/aspell/Makefile
src/ispell/Makefile
src/uspell/Makefile
src/myspell/Makefile
src/hspell/Makefile
src/applespell/Makefile
tests/Makefile
tests/ispell
doc/Makefile
data/Makefile
autopackage/default.apspec
])

dnl ===========================================================================================

relocatable_library="no"
if test "x$native_win32" = "xyes" || test "x$br_cv_binreloc" = "xyes"; then
   relocatable_library="yes"
fi

echo "
$PACKAGE-$VERSION

	prefix:                         ${prefix}
	compiler:                       ${CC}
	
	Build Aspell backend:           ${build_aspell}
	Build Ispell backend:           ${build_ispell}
	Build Uspell backend:           ${build_uspell}
	Build Hspell backend:           ${build_hspell}
	Build Myspell/Hunspell backend: ${build_myspell}
	Build a relocatable library:	${relocatable_library}
"
